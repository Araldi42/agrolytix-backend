/**
 * Controller de Usu√°rios - VERS√ÉO CORRIGIDA
 * Resposta padronizada e consistente
 */

const Usuario = require('../models/Usuario');
const ValidationService = require('../services/validationService');
const { sucessoResponse, respostaPaginada, erroResponse } = require('../utils/responseUtils');

class UsuariosController {
    constructor() {
        this.usuarioModel = new Usuario();
    }

    /**
     * Listar usu√°rios da empresa
     */
    async listar(req, res, next) {
        try {
            console.log('üéØ Controller listar - Usu√°rio:', req.usuario?.nome);
            console.log('üéØ Empresa ID:', req.usuario?.empresa_id);

            const empresaId = req.usuario.empresa_id;

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado - empresa n√£o identificada', 403);
            }

            const options = {
                search: req.query.search,
                perfil_id: req.query.perfil_id,
                ativo: req.query.ativo !== 'false',
                page: parseInt(req.query.page) || 1,
                limit: Math.min(parseInt(req.query.limit) || 20, 100)
            };

            console.log('üéØ Options:', options);

            const usuarios = await this.usuarioModel.findByEmpresa(empresaId, options);

            // Contar total para pagina√ß√£o
            const total = await this.usuarioModel.count({
                empresa_id: empresaId,
                ativo: options.ativo
            });

            console.log('üéØ Usu√°rios encontrados:', usuarios.length);
            console.log('üéØ Total:', total);

            return respostaPaginada(
                res,
                usuarios,
                total,
                options.page,
                options.limit,
                'Usu√°rios listados com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao listar usu√°rios:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Buscar usu√°rio por ID
     */
    async buscarPorId(req, res, next) {
        try {
            const { id } = req.params;
            const empresaId = req.usuario.empresa_id;

            // Verificar se pode acessar o usu√°rio
            if (req.usuario.nivel_hierarquia > 2 && req.usuario.id !== parseInt(id)) {
                return erroResponse(res, 'Sem permiss√£o para acessar este usu√°rio', 403);
            }

            const usuario = await this.usuarioModel.findByIdWithDetails(id, empresaId);

            if (!usuario) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            return sucessoResponse(
                res,
                usuario,
                'Usu√°rio encontrado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Criar novo usu√°rio
     */
    async criar(req, res, next) {
        try {
            const { senha, confirmar_senha, fazendas_ids, ...dadosUsuario } = req.body;
            const empresaId = req.usuario.empresa_id;

            // Verificar permiss√µes
            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para criar usu√°rios', 403);
            }

            // Validar dados b√°sicos
            const validationErrors = this.usuarioModel.validate(dadosUsuario);
            if (validationErrors.length > 0) {
                return erroResponse(res, 'Dados inv√°lidos', 400, validationErrors);
            }

            // Validar senha
            if (!senha || senha.length < 6) {
                return erroResponse(res, 'Senha deve ter pelo menos 6 caracteres', 400);
            }

            if (senha !== confirmar_senha) {
                return erroResponse(res, 'Confirma√ß√£o de senha n√£o confere', 400);
            }

            // Verificar unicidade
            const loginUnico = await this.usuarioModel.isLoginUnique(dadosUsuario.login);
            if (!loginUnico) {
                return erroResponse(res, 'Login j√° est√° em uso', 409);
            }

            const emailUnico = await this.usuarioModel.isEmailUnique(dadosUsuario.email);
            if (!emailUnico) {
                return erroResponse(res, 'Email j√° est√° em uso', 409);
            }

            // Definir empresa e criador
            dadosUsuario.empresa_id = empresaId;
            dadosUsuario.criado_por = req.usuario.id;
            dadosUsuario.fazendas_ids = fazendas_ids;

            // Criar usu√°rio
            const novoUsuario = await this.usuarioModel.createWithPassword(dadosUsuario, senha);

            return sucessoResponse(
                res,
                novoUsuario,
                'Usu√°rio criado com sucesso',
                201
            );

        } catch (error) {
            console.error('‚ùå Erro ao criar usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Atualizar usu√°rio
     */
    async atualizar(req, res, next) {
        try {
            const { id } = req.params;
            const { fazendas_ids, ...dadosUsuario } = req.body;
            const empresaId = req.usuario.empresa_id;

            // Verificar se pode editar
            if (req.usuario.nivel_hierarquia > 3 && req.usuario.id !== parseInt(id)) {
                return erroResponse(res, 'Sem permiss√£o para editar este usu√°rio', 403);
            }

            // Buscar usu√°rio existente
            const usuarioExistente = await this.usuarioModel.findByIdWithDetails(id, empresaId);
            if (!usuarioExistente) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            // Validar dados
            const validationErrors = this.usuarioModel.validate(dadosUsuario);
            if (validationErrors.length > 0) {
                return erroResponse(res, 'Dados inv√°lidos', 400, validationErrors);
            }

            // Verificar unicidade se alterado
            if (dadosUsuario.login && dadosUsuario.login !== usuarioExistente.login) {
                const loginUnico = await this.usuarioModel.isLoginUnique(dadosUsuario.login, id);
                if (!loginUnico) {
                    return erroResponse(res, 'Login j√° est√° em uso', 409);
                }
            }

            if (dadosUsuario.email && dadosUsuario.email !== usuarioExistente.email) {
                const emailUnico = await this.usuarioModel.isEmailUnique(dadosUsuario.email, id);
                if (!emailUnico) {
                    return erroResponse(res, 'Email j√° est√° em uso', 409);
                }
            }

            // Atualizar usu√°rio
            const usuarioAtualizado = await this.usuarioModel.update(id, dadosUsuario);

            // Atualizar fazendas se fornecido
            if (fazendas_ids !== undefined) {
                await this.usuarioModel.updateFazendasAccess(id, fazendas_ids);
            }

            // Buscar usu√°rio completo atualizado
            const usuarioCompleto = await this.usuarioModel.findByIdWithDetails(id, empresaId);

            return sucessoResponse(
                res,
                usuarioCompleto,
                'Usu√°rio atualizado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao atualizar usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Inativar usu√°rio
     */
    async inativar(req, res, next) {
        try {
            const { id } = req.params;
            const empresaId = req.usuario.empresa_id;

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para inativar usu√°rios', 403);
            }

            if (req.usuario.id === parseInt(id)) {
                return erroResponse(res, 'N√£o √© poss√≠vel inativar seu pr√≥prio usu√°rio', 400);
            }

            const usuario = await this.usuarioModel.findByIdWithDetails(id, empresaId);
            if (!usuario) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            await this.usuarioModel.update(id, { ativo: false });

            return sucessoResponse(
                res,
                { id: parseInt(id), ativo: false },
                'Usu√°rio inativado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao inativar usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Reativar usu√°rio
     */
    async reativar(req, res, next) {
        try {
            const { id } = req.params;
            const empresaId = req.usuario.empresa_id;

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para reativar usu√°rios', 403);
            }

            const usuario = await this.usuarioModel.findByIdWithDetails(id, empresaId);
            if (!usuario) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            await this.usuarioModel.update(id, { ativo: true });

            return sucessoResponse(
                res,
                { id: parseInt(id), ativo: true },
                'Usu√°rio reativado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao reativar usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Alterar senha
     */
    async alterarSenha(req, res, next) {
        try {
            const { id } = req.params;
            const { senha_atual, nova_senha, confirmar_senha } = req.body;

            if (req.usuario.id !== parseInt(id) && req.usuario.nivel_hierarquia > 2) {
                return erroResponse(res, 'Sem permiss√£o para alterar senha deste usu√°rio', 403);
            }

            if (!nova_senha || nova_senha.length < 6) {
                return erroResponse(res, 'Nova senha deve ter pelo menos 6 caracteres', 400);
            }

            if (nova_senha !== confirmar_senha) {
                return erroResponse(res, 'Confirma√ß√£o de senha n√£o confere', 400);
            }

            // Se for o pr√≥prio usu√°rio, verificar senha atual
            if (req.usuario.id === parseInt(id)) {
                if (!senha_atual) {
                    return erroResponse(res, 'Senha atual √© obrigat√≥ria', 400);
                }

                const senhaValida = await this.usuarioModel.verifyPassword(id, senha_atual);
                if (!senhaValida) {
                    return erroResponse(res, 'Senha atual incorreta', 400);
                }
            }

            const resultado = await this.usuarioModel.updatePassword(id, nova_senha);

            if (!resultado) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            return sucessoResponse(
                res,
                { mensagem: 'Senha alterada com sucesso' },
                'Senha alterada com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao alterar senha:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Buscar usu√°rios por perfil
     */
    async buscarPorPerfil(req, res, next) {
        try {
            const { perfil_id } = req.params;
            const empresaId = req.usuario.empresa_id;

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado', 403);
            }

            const usuarios = await this.usuarioModel.findByPerfil(perfil_id, empresaId);

            return sucessoResponse(
                res,
                usuarios,
                'Usu√°rios por perfil listados com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rios por perfil:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Buscar usu√°rios por cargo
     */
    async buscarPorCargo(req, res, next) {
        try {
            const { cargo } = req.query;
            const empresaId = req.usuario.empresa_id;

            if (!cargo) {
                return erroResponse(res, 'Cargo √© obrigat√≥rio', 400);
            }

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado', 403);
            }

            const usuarios = await this.usuarioModel.findByCargo(cargo, empresaId);

            return sucessoResponse(
                res,
                usuarios,
                'Usu√°rios por cargo listados com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rios por cargo:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Buscar usu√°rios inativos
     */
    async usuariosInativos(req, res, next) {
        try {
            const { dias = 30 } = req.query;
            const empresaId = req.usuario.empresa_id;

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado', 403);
            }

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para visualizar usu√°rios inativos', 403);
            }

            const usuarios = await this.usuarioModel.findInativosPorPeriodo(parseInt(dias), empresaId);

            return sucessoResponse(
                res,
                usuarios,
                `Usu√°rios inativos h√° ${dias} dias listados com sucesso`
            );

        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rios inativos:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Gerenciar fazendas
     */
    async gerenciarFazendas(req, res, next) {
        try {
            const { id } = req.params;
            const { fazendas_ids } = req.body;
            const empresaId = req.usuario.empresa_id;

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para gerenciar acesso √†s fazendas', 403);
            }

            const usuario = await this.usuarioModel.findByIdWithDetails(id, empresaId);
            if (!usuario) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            if (!Array.isArray(fazendas_ids)) {
                return erroResponse(res, 'fazendas_ids deve ser um array', 400);
            }

            await this.usuarioModel.updateFazendasAccess(id, fazendas_ids);
            const fazendasAtualizadas = await this.usuarioModel.getFazendasAccess(id);

            return sucessoResponse(
                res,
                {
                    usuario_id: parseInt(id),
                    fazendas: fazendasAtualizadas
                },
                'Acesso √†s fazendas atualizado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao gerenciar fazendas:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Buscar fazendas do usu√°rio
     */
    async fazendasUsuario(req, res, next) {
        try {
            const { id } = req.params;
            const empresaId = req.usuario.empresa_id;

            if (req.usuario.nivel_hierarquia > 3 && req.usuario.id !== parseInt(id)) {
                return erroResponse(res, 'Sem permiss√£o para acessar fazendas deste usu√°rio', 403);
            }

            const usuario = await this.usuarioModel.findByIdWithDetails(id, empresaId);
            if (!usuario) {
                return erroResponse(res, 'Usu√°rio n√£o encontrado', 404);
            }

            const fazendas = await this.usuarioModel.getFazendasAccess(id);

            return sucessoResponse(
                res,
                fazendas,
                'Fazendas do usu√°rio listadas com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao buscar fazendas do usu√°rio:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Obter estat√≠sticas
     */
    async estatisticas(req, res, next) {
        try {
            const empresaId = req.usuario.empresa_id;

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado', 403);
            }

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para visualizar estat√≠sticas', 403);
            }

            const estatisticas = await this.usuarioModel.getEstatisticas(empresaId);

            return sucessoResponse(
                res,
                estatisticas,
                'Estat√≠sticas de usu√°rios obtidas com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao obter estat√≠sticas:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }

    /**
     * Dashboard
     */
    async dashboard(req, res, next) {
        try {
            const empresaId = req.usuario.empresa_id;

            if (!empresaId) {
                return erroResponse(res, 'Acesso negado', 403);
            }

            if (req.usuario.nivel_hierarquia > 3) {
                return erroResponse(res, 'Sem permiss√£o para visualizar dashboard', 403);
            }

            // Buscar dados em paralelo
            const [
                estatisticas,
                usuariosInativos,
                usuariosRecentes
            ] = await Promise.all([
                this.usuarioModel.getEstatisticas(empresaId),
                this.usuarioModel.findInativosPorPeriodo(30, empresaId),
                this.usuarioModel.findByEmpresa(empresaId, {
                    page: 1,
                    limit: 5,
                    orderBy: 'criado_em DESC'
                })
            ]);

            const dashboard = {
                estatisticas_gerais: estatisticas,
                alertas: {
                    usuarios_inativos: usuariosInativos.slice(0, 10)
                },
                usuarios_recentes: usuariosRecentes,
                timestamp: new Date().toISOString()
            };

            return sucessoResponse(
                res,
                dashboard,
                'Dashboard de usu√°rios carregado com sucesso'
            );

        } catch (error) {
            console.error('‚ùå Erro ao carregar dashboard:', error);
            return erroResponse(res, 'Erro interno do servidor', 500);
        }
    }
}

module.exports = new UsuariosController();