#!/bin/bash

# Script de gerenciamento do ambiente Docker Agrolytix
# Uso: ./scripts/docker-manager.sh [comando]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir ajuda
show_help() {
    echo -e "${BLUE}=== Agrolytix Docker Manager ===${NC}"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo ""
    echo -e "${GREEN}setup${NC}        - Configura√ß√£o inicial completa"
    echo -e "${GREEN}start${NC}        - Iniciar todos os servi√ßos"
    echo -e "${GREEN}stop${NC}         - Parar todos os servi√ßos"
    echo -e "${GREEN}restart${NC}      - Reiniciar todos os servi√ßos"
    echo -e "${GREEN}logs${NC}         - Visualizar logs dos servi√ßos"
    echo -e "${GREEN}db-only${NC}      - Iniciar apenas o banco de dados"
    echo -e "${GREEN}backup${NC}       - Fazer backup do banco de dados"
    echo -e "${GREEN}restore${NC}      - Restaurar backup do banco"
    echo -e "${GREEN}clean${NC}        - Limpar containers e volumes"
    echo -e "${GREEN}status${NC}       - Status dos servi√ßos"
    echo -e "${GREEN}shell${NC}        - Acessar shell do container da app"
    echo -e "${GREEN}db-shell${NC}     - Acessar shell do PostgreSQL"
    echo ""
}

# Fun√ß√£o para verificar se Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando!${NC}"
        exit 1
    fi
}

# Fun√ß√£o para configura√ß√£o inicial
setup() {
    echo -e "${BLUE}üöÄ Configurando ambiente Agrolytix...${NC}"
    
    # Criar diret√≥rios necess√°rios
    mkdir -p database/init
    mkdir -p database/backups
    mkdir -p logs
    
    # Copiar arquivo de ambiente se n√£o existir
    if [ ! -f .env ]; then
        if [ -f env.example ]; then
            cp env.example .env
            echo -e "${GREEN}‚úÖ Arquivo .env criado a partir do env.example${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Arquivo env.example n√£o encontrado${NC}"
        fi
    fi
    
    # Build das imagens
    echo -e "${BLUE}üî® Fazendo build das imagens...${NC}"
    docker-compose build
    
    # Iniciar servi√ßos
    echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
    docker-compose up -d postgres redis
    
    # Aguardar banco ficar pronto
    echo -e "${BLUE}‚è≥ Aguardando banco de dados ficar pronto...${NC}"
    sleep 10
    
    echo -e "${GREEN}‚úÖ Configura√ß√£o inicial conclu√≠da!${NC}"
    echo -e "${BLUE}üåê Acesse o Adminer em: http://localhost:8080${NC}"
    echo -e "${BLUE}üìä Dados de conex√£o:${NC}"
    echo "   Sistema: PostgreSQL"
    echo "   Servidor: postgres"
    echo "   Usu√°rio: agrolytix_user"
    echo "   Senha: agrolytix_2024"
    echo "   Base: agrolytix_db"
}

# Fun√ß√£o para iniciar servi√ßos
start() {
    echo -e "${BLUE}üöÄ Iniciando servi√ßos Agrolytix...${NC}"
    docker-compose up -d
    echo -e "${GREEN}‚úÖ Servi√ßos iniciados!${NC}"
    status
}

# Fun√ß√£o para parar servi√ßos
stop() {
    echo -e "${YELLOW}üõë Parando servi√ßos Agrolytix...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Servi√ßos parados!${NC}"
}

# Fun√ß√£o para reiniciar servi√ßos
restart() {
    echo -e "${BLUE}üîÑ Reiniciando servi√ßos Agrolytix...${NC}"
    docker-compose restart
    echo -e "${GREEN}‚úÖ Servi√ßos reiniciados!${NC}"
}

# Fun√ß√£o para visualizar logs
logs() {
    echo -e "${BLUE}üìã Logs dos servi√ßos:${NC}"
    docker-compose logs -f --tail=100
}

# Fun√ß√£o para iniciar apenas banco
db_only() {
    echo -e "${BLUE}üóÑÔ∏è  Iniciando apenas banco de dados...${NC}"
    docker-compose up -d postgres adminer
    echo -e "${GREEN}‚úÖ Banco de dados iniciado!${NC}"
    echo -e "${BLUE}üåê Adminer dispon√≠vel em: http://localhost:8080${NC}"
}

# Fun√ß√£o para backup
backup() {
    echo -e "${BLUE}üíæ Fazendo backup do banco de dados...${NC}"
    
    BACKUP_FILE="database/backups/agrolytix_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    docker-compose exec postgres pg_dump -U agrolytix_user -d agrolytix_db > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Backup criado: $BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå Erro ao criar backup!${NC}"
        exit 1
    fi
}

# Fun√ß√£o para restaurar backup
restore() {
    echo -e "${YELLOW}‚ö†Ô∏è  Esta opera√ß√£o ir√° substituir todos os dados atuais!${NC}"
    read -p "Tem certeza? (s/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        echo "Digite o caminho do arquivo de backup:"
        read BACKUP_FILE
        
        if [ -f "$BACKUP_FILE" ]; then
            echo -e "${BLUE}üîÑ Restaurando backup...${NC}"
            docker-compose exec -T postgres psql -U agrolytix_user -d agrolytix_db < "$BACKUP_FILE"
            echo -e "${GREEN}‚úÖ Backup restaurado!${NC}"
        else
            echo -e "${RED}‚ùå Arquivo n√£o encontrado: $BACKUP_FILE${NC}"
        fi
    else
        echo -e "${YELLOW}Opera√ß√£o cancelada.${NC}"
    fi
}

# Fun√ß√£o para limpeza
clean() {
    echo -e "${YELLOW}‚ö†Ô∏è  Esta opera√ß√£o ir√° remover todos os containers e volumes!${NC}"
    read -p "Tem certeza? (s/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        echo -e "${BLUE}üßπ Limpando ambiente...${NC}"
        docker-compose down -v --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ Limpeza conclu√≠da!${NC}"
    else
        echo -e "${YELLOW}Opera√ß√£o cancelada.${NC}"
    fi
}

# Fun√ß√£o para status
status() {
    echo -e "${BLUE}üìä Status dos servi√ßos:${NC}"
    docker-compose ps
}

# Fun√ß√£o para shell da aplica√ß√£o
shell() {
    echo -e "${BLUE}üêö Acessando shell da aplica√ß√£o...${NC}"
    docker-compose exec app sh
}

# Fun√ß√£o para shell do banco
db_shell() {
    echo -e "${BLUE}üóÑÔ∏è  Acessando shell do PostgreSQL...${NC}"
    docker-compose exec postgres psql -U agrolytix_user -d agrolytix_db
}

# Verificar Docker
check_docker

# Processar comando
case "${1:-help}" in
    setup)
        setup
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    logs)
        logs
        ;;
    db-only)
        db_only
        ;;
    backup)
        backup
        ;;
    restore)
        restore
        ;;
    clean)
        clean
        ;;
    status)
        status
        ;;
    shell)
        shell
        ;;
    db-shell)
        db_shell
        ;;
    help|*)
        show_help
        ;;
esac 