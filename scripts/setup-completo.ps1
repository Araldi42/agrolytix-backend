# Script de Setup Completo - Agrolytix Backend
# Este script automatiza todo o processo de instala√ß√£o e valida√ß√£o

param(
    [switch]$SkipValidation = $false
)

Write-Host "üå± AGROLYTIX BACKEND - SETUP COMPLETO" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

# Fun√ß√£o para verificar se comando existe
function Test-Command {
    param($Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# Fun√ß√£o para aguardar servi√ßo
function Wait-ForService {
    param($Url, $ServiceName, $MaxAttempts = 30)
    
    Write-Host "Aguardando $ServiceName..." -ForegroundColor Yellow
    
    for ($i = 1; $i -le $MaxAttempts; $i++) {
        try {
            $response = Invoke-WebRequest -Uri $Url -TimeoutSec 5 -ErrorAction Stop
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $ServiceName est√° funcionando!" -ForegroundColor Green
                return $true
            }
        }
        catch {
            Write-Host "‚è≥ Tentativa $i/$MaxAttempts..." -ForegroundColor Gray
            Start-Sleep -Seconds 2
        }
    }
    
    Write-Host "‚ùå $ServiceName n√£o respondeu ap√≥s $MaxAttempts tentativas" -ForegroundColor Red
    return $false
}

# 1. VERIFICAR PR√â-REQUISITOS
Write-Host "`nüìã 1. VERIFICANDO PR√â-REQUISITOS..." -ForegroundColor Cyan

# Verificar Docker
if (-not (Test-Command "docker")) {
    Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
    Write-Host "   Instale o Docker Desktop: https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

if (-not (Test-Command "docker-compose")) {
    Write-Host "‚ùå Docker Compose n√£o encontrado!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Docker encontrado:" -ForegroundColor Green
docker --version
docker-compose --version

# Verificar Git
if (-not (Test-Command "git")) {
    Write-Host "‚ùå Git n√£o encontrado!" -ForegroundColor Red
    Write-Host "   Instale o Git: https://git-scm.com/downloads" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Git encontrado:" -ForegroundColor Green
git --version

# 2. CONFIGURAR AMBIENTE
Write-Host "`nüîß 2. CONFIGURANDO AMBIENTE..." -ForegroundColor Cyan

# Verificar se .env existe
if (-not (Test-Path ".env")) {
    if (Test-Path "env.example") {
        Write-Host "üìÑ Criando arquivo .env..." -ForegroundColor Yellow
        Copy-Item "env.example" ".env"
        Write-Host "‚úÖ Arquivo .env criado com configura√ß√µes padr√£o" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Arquivo env.example n√£o encontrado" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚úÖ Arquivo .env j√° existe" -ForegroundColor Green
}

# 3. PARAR CONTAINERS EXISTENTES
Write-Host "`nüõë 3. PARANDO CONTAINERS EXISTENTES..." -ForegroundColor Cyan
docker-compose down -v 2>$null
Write-Host "‚úÖ Containers parados" -ForegroundColor Green

# 4. CONSTRUIR IMAGENS
Write-Host "`nüî® 4. CONSTRUINDO IMAGENS DOCKER..." -ForegroundColor Cyan
Write-Host "   (Isso pode levar alguns minutos na primeira vez)" -ForegroundColor Gray

$buildResult = docker-compose build
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao construir imagens Docker!" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Imagens constru√≠das com sucesso" -ForegroundColor Green

# 5. INICIAR SERVI√áOS
Write-Host "`nüöÄ 5. INICIANDO SERVI√áOS..." -ForegroundColor Cyan

$startResult = docker-compose up -d
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao iniciar servi√ßos!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Servi√ßos iniciados" -ForegroundColor Green

# 6. AGUARDAR SERVI√áOS
Write-Host "`n‚è≥ 6. AGUARDANDO SERVI√áOS FICAREM PRONTOS..." -ForegroundColor Cyan

# Aguardar PostgreSQL
Write-Host "Aguardando PostgreSQL..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Aguardar API
if (-not (Wait-ForService "http://localhost:3000" "API")) {
    Write-Host "‚ùå API n√£o iniciou corretamente" -ForegroundColor Red
    Write-Host "Verificando logs..." -ForegroundColor Yellow
    docker-compose logs app
    exit 1
}

# Aguardar Health Check
if (-not (Wait-ForService "http://localhost:3000/api/saude" "Health Check")) {
    Write-Host "‚ùå Health Check falhou" -ForegroundColor Red
    exit 1
}

# 7. CONFIGURAR USU√ÅRIO ADMIN
Write-Host "`nüë§ 7. CONFIGURANDO USU√ÅRIO ADMIN.." -ForegroundColor Cyan

if (Test-Path "scripts/setup-admin.ps1") {
    & "scripts/setup-admin.ps1"
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao configurar usu√°rio admin!" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ö†Ô∏è Script setup-admin.ps1 n√£o encontrado" -ForegroundColor Yellow
    Write-Host "   Configurando manualmente..." -ForegroundColor Gray
    
    $senha = "$2b$10$/gZHrGgR/5XmStju61NzPOClTwsAJWYRH5b4zeG.c246/W6sl1XZe"
    $updateQuery = "UPDATE usuarios SET senha = ''$senha'', perfil_id = 1 WHERE email = ''admin@agrolytix.com'';"
    docker-compose exec postgres psql -U agrolytix_user -d agrolytix_db -c "$updateQuery"
}

# 8. VERIFICAR STATUS
Write-Host "`nüìä 8. VERIFICANDO STATUS DOS CONTAINERS..." -ForegroundColor Cyan
docker-compose ps

# 9. VALIDA√á√ÉO COMPLETA
if (-not $SkipValidation) {
    Write-Host "`n‚úÖ 9. EXECUTANDO VALIDA√á√ÉO COMPLETA..." -ForegroundColor Cyan
    
    if (Test-Path "scripts/test-api.ps1") {
        & "scripts/test-api.ps1"
    } else {
        Write-Host "‚ö†Ô∏è Script test-api.ps1 n√£o encontrado" -ForegroundColor Yellow
        Write-Host "   Executando teste b√°sico..." -ForegroundColor Gray
        
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:3000/" -TimeoutSec 10
            if ($response.sucesso) {
                Write-Host "‚úÖ API respondendo corretamente" -ForegroundColor Green
            }
        }
        catch {
            Write-Host "‚ùå Erro ao testar API: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# 10. RESUMO FINAL
Write-Host "`nüéâ SETUP COMPLETO!" -ForegroundColor Green
Write-Host "=================" -ForegroundColor Green

Write-Host "`nüìç SERVI√áOS DISPON√çVEIS:" -ForegroundColor Cyan
Write-Host "‚Ä¢ API: http://localhost:3000" -ForegroundColor White
Write-Host "‚Ä¢ Health Check: http://localhost:3000/api/saude" -ForegroundColor White
Write-Host "‚Ä¢ Adminer (DB): http://localhost:8080" -ForegroundColor White
Write-Host "‚Ä¢ PostgreSQL: localhost:5432" -ForegroundColor White
Write-Host "‚Ä¢ Redis: localhost:6379" -ForegroundColor White

Write-Host "`nüîê CREDENCIAIS DE TESTE:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Email/Login: admin@agrolytix.com" -ForegroundColor White
Write-Host "‚Ä¢ Senha: admin123" -ForegroundColor White

Write-Host "`nüìö PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "1. Importar collection no Postman:" -ForegroundColor White
Write-Host "   - postman/Agrolytix-API.postman_collection.json" -ForegroundColor Gray
Write-Host "   - postman/Agrolytix-Environment.postman_environment.json" -ForegroundColor Gray
Write-Host "2. Ler documenta√ß√£o:" -ForegroundColor White
Write-Host "   - README.md" -ForegroundColor Gray
Write-Host "   - postman/INICIO-RAPIDO.md" -ForegroundColor Gray
Write-Host "3. Testar endpoints no Postman" -ForegroundColor White

Write-Host "`nüîß COMANDOS √öTEIS:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Ver logs: docker-compose logs -f app" -ForegroundColor White
Write-Host "‚Ä¢ Parar: docker-compose down" -ForegroundColor White
Write-Host "‚Ä¢ Reiniciar: docker-compose restart" -ForegroundColor White
Write-Host "‚Ä¢ Testar API: .\scripts\test-api.ps1" -ForegroundColor White

Write-Host "`nüå± Agrolytix Backend est√° pronto para uso!" -ForegroundColor Green 